/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IKoalasSeeder {
  export type SeedStruct = {
    background: BigNumberish;
    fur: BigNumberish;
    face: BigNumberish;
    clothe: BigNumberish;
    eye: BigNumberish;
    mouth: BigNumberish;
    erring: BigNumberish;
    hand: BigNumberish;
    head: BigNumberish;
  };

  export type SeedStructOutput = [
    background: bigint,
    fur: bigint,
    face: bigint,
    clothe: bigint,
    eye: bigint,
    mouth: bigint,
    erring: bigint,
    hand: bigint,
    head: bigint
  ] & {
    background: bigint;
    fur: bigint;
    face: bigint;
    clothe: bigint;
    eye: bigint;
    mouth: bigint;
    erring: bigint;
    hand: bigint;
    head: bigint;
  };
}

export interface Koalas_v1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATION_TYPEHASH"
      | "DOMAIN_TYPEHASH"
      | "approve"
      | "balanceOf"
      | "burn"
      | "checkpoints"
      | "contractURI"
      | "dataURI"
      | "decimals"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "descriptor"
      | "getApproved"
      | "getCurrentVotes"
      | "getPriorVotes"
      | "isApprovedForAll"
      | "isDescriptorLocked"
      | "isMinterLocked"
      | "isSeedLocked"
      | "koalasersDAO"
      | "lockDescriptor"
      | "lockMinter"
      | "lockSeeder"
      | "mint"
      | "minter"
      | "name"
      | "nonces"
      | "numCheckpoints"
      | "owner"
      | "ownerOf"
      | "proxyRegistry"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "seeder"
      | "seeds"
      | "setApprovalForAll"
      | "setContractURIHash"
      | "setDescriptor"
      | "setKoalasDAO"
      | "setMinter"
      | "setSeeder"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "votesToDelegate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "DelegateChanged"
      | "DelegateVotesChanged"
      | "DescriptorLocked"
      | "DescriptorUpdated"
      | "KoalasBurned"
      | "KoalasCreated"
      | "KoalasdersDAOUpdated"
      | "MinterLocked"
      | "MinterUpdated"
      | "OwnershipTransferred"
      | "SeederLocked"
      | "SeederUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "descriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDescriptorLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMinterLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSeedLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "koalasersDAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockSeeder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "seeder", values?: undefined): string;
  encodeFunctionData(functionFragment: "seeds", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURIHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDescriptor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKoalasDAO",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeeder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votesToDelegate",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "descriptor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDescriptorLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMinterLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSeedLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "koalasersDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockSeeder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seeder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURIHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKoalasDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSeeder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesToDelegate",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: AddressLike,
    toDelegate: AddressLike
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: string,
    toDelegate: string
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DescriptorLockedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DescriptorUpdatedEvent {
  export type InputTuple = [descriptor: AddressLike];
  export type OutputTuple = [descriptor: string];
  export interface OutputObject {
    descriptor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KoalasBurnedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KoalasCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seed: IKoalasSeeder.SeedStruct
  ];
  export type OutputTuple = [
    tokenId: bigint,
    seed: IKoalasSeeder.SeedStructOutput
  ];
  export interface OutputObject {
    tokenId: bigint;
    seed: IKoalasSeeder.SeedStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KoalasdersDAOUpdatedEvent {
  export type InputTuple = [KoalasdersDAO: AddressLike];
  export type OutputTuple = [KoalasdersDAO: string];
  export interface OutputObject {
    KoalasdersDAO: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterLockedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterUpdatedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeederLockedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeederUpdatedEvent {
  export type InputTuple = [seeder: AddressLike];
  export type OutputTuple = [seeder: string];
  export interface OutputObject {
    seeder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Koalas_v1 extends BaseContract {
  connect(runner?: ContractRunner | null): Koalas_v1;
  waitForDeployment(): Promise<this>;

  interface: Koalas_v1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  checkpoints: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { fromBlock: bigint; votes: bigint }],
    "view"
  >;

  contractURI: TypedContractMethod<[], [string], "view">;

  dataURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegate: TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;

  delegateBySig: TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<[delegator: AddressLike], [string], "view">;

  descriptor: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCurrentVotes: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getPriorVotes: TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isDescriptorLocked: TypedContractMethod<[], [boolean], "view">;

  isMinterLocked: TypedContractMethod<[], [boolean], "view">;

  isSeedLocked: TypedContractMethod<[], [boolean], "view">;

  koalasersDAO: TypedContractMethod<[], [string], "view">;

  lockDescriptor: TypedContractMethod<[], [void], "nonpayable">;

  lockMinter: TypedContractMethod<[], [void], "nonpayable">;

  lockSeeder: TypedContractMethod<[], [void], "nonpayable">;

  mint: TypedContractMethod<[], [bigint], "nonpayable">;

  minter: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  numCheckpoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  proxyRegistry: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  seeder: TypedContractMethod<[], [string], "view">;

  seeds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        background: bigint;
        fur: bigint;
        face: bigint;
        clothe: bigint;
        eye: bigint;
        mouth: bigint;
        erring: bigint;
        hand: bigint;
        head: bigint;
      }
    ],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setContractURIHash: TypedContractMethod<
    [newContractURIHash: string],
    [void],
    "nonpayable"
  >;

  setDescriptor: TypedContractMethod<
    [_descriptor: AddressLike],
    [void],
    "nonpayable"
  >;

  setKoalasDAO: TypedContractMethod<
    [_KoalasersDAO: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinter: TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;

  setSeeder: TypedContractMethod<[_seeder: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  votesToDelegate: TypedContractMethod<
    [delegator: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { fromBlock: bigint; votes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dataURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateBySig"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[delegator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "descriptor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentVotes"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriorVotes"
  ): TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDescriptorLocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMinterLocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSeedLocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "koalasersDAO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockDescriptor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockMinter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockSeeder"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxyRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seeder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seeds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        background: bigint;
        fur: bigint;
        face: bigint;
        clothe: bigint;
        eye: bigint;
        mouth: bigint;
        erring: bigint;
        hand: bigint;
        head: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractURIHash"
  ): TypedContractMethod<[newContractURIHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDescriptor"
  ): TypedContractMethod<[_descriptor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKoalasDAO"
  ): TypedContractMethod<[_KoalasersDAO: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinter"
  ): TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSeeder"
  ): TypedContractMethod<[_seeder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votesToDelegate"
  ): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;
  getEvent(
    key: "DescriptorLocked"
  ): TypedContractEvent<
    DescriptorLockedEvent.InputTuple,
    DescriptorLockedEvent.OutputTuple,
    DescriptorLockedEvent.OutputObject
  >;
  getEvent(
    key: "DescriptorUpdated"
  ): TypedContractEvent<
    DescriptorUpdatedEvent.InputTuple,
    DescriptorUpdatedEvent.OutputTuple,
    DescriptorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KoalasBurned"
  ): TypedContractEvent<
    KoalasBurnedEvent.InputTuple,
    KoalasBurnedEvent.OutputTuple,
    KoalasBurnedEvent.OutputObject
  >;
  getEvent(
    key: "KoalasCreated"
  ): TypedContractEvent<
    KoalasCreatedEvent.InputTuple,
    KoalasCreatedEvent.OutputTuple,
    KoalasCreatedEvent.OutputObject
  >;
  getEvent(
    key: "KoalasdersDAOUpdated"
  ): TypedContractEvent<
    KoalasdersDAOUpdatedEvent.InputTuple,
    KoalasdersDAOUpdatedEvent.OutputTuple,
    KoalasdersDAOUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinterLocked"
  ): TypedContractEvent<
    MinterLockedEvent.InputTuple,
    MinterLockedEvent.OutputTuple,
    MinterLockedEvent.OutputObject
  >;
  getEvent(
    key: "MinterUpdated"
  ): TypedContractEvent<
    MinterUpdatedEvent.InputTuple,
    MinterUpdatedEvent.OutputTuple,
    MinterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SeederLocked"
  ): TypedContractEvent<
    SeederLockedEvent.InputTuple,
    SeederLockedEvent.OutputTuple,
    SeederLockedEvent.OutputObject
  >;
  getEvent(
    key: "SeederUpdated"
  ): TypedContractEvent<
    SeederUpdatedEvent.InputTuple,
    SeederUpdatedEvent.OutputTuple,
    SeederUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "DelegateChanged(address,address,address)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;

    "DescriptorLocked()": TypedContractEvent<
      DescriptorLockedEvent.InputTuple,
      DescriptorLockedEvent.OutputTuple,
      DescriptorLockedEvent.OutputObject
    >;
    DescriptorLocked: TypedContractEvent<
      DescriptorLockedEvent.InputTuple,
      DescriptorLockedEvent.OutputTuple,
      DescriptorLockedEvent.OutputObject
    >;

    "DescriptorUpdated(address)": TypedContractEvent<
      DescriptorUpdatedEvent.InputTuple,
      DescriptorUpdatedEvent.OutputTuple,
      DescriptorUpdatedEvent.OutputObject
    >;
    DescriptorUpdated: TypedContractEvent<
      DescriptorUpdatedEvent.InputTuple,
      DescriptorUpdatedEvent.OutputTuple,
      DescriptorUpdatedEvent.OutputObject
    >;

    "KoalasBurned(uint256)": TypedContractEvent<
      KoalasBurnedEvent.InputTuple,
      KoalasBurnedEvent.OutputTuple,
      KoalasBurnedEvent.OutputObject
    >;
    KoalasBurned: TypedContractEvent<
      KoalasBurnedEvent.InputTuple,
      KoalasBurnedEvent.OutputTuple,
      KoalasBurnedEvent.OutputObject
    >;

    "KoalasCreated(uint256,tuple)": TypedContractEvent<
      KoalasCreatedEvent.InputTuple,
      KoalasCreatedEvent.OutputTuple,
      KoalasCreatedEvent.OutputObject
    >;
    KoalasCreated: TypedContractEvent<
      KoalasCreatedEvent.InputTuple,
      KoalasCreatedEvent.OutputTuple,
      KoalasCreatedEvent.OutputObject
    >;

    "KoalasdersDAOUpdated(address)": TypedContractEvent<
      KoalasdersDAOUpdatedEvent.InputTuple,
      KoalasdersDAOUpdatedEvent.OutputTuple,
      KoalasdersDAOUpdatedEvent.OutputObject
    >;
    KoalasdersDAOUpdated: TypedContractEvent<
      KoalasdersDAOUpdatedEvent.InputTuple,
      KoalasdersDAOUpdatedEvent.OutputTuple,
      KoalasdersDAOUpdatedEvent.OutputObject
    >;

    "MinterLocked()": TypedContractEvent<
      MinterLockedEvent.InputTuple,
      MinterLockedEvent.OutputTuple,
      MinterLockedEvent.OutputObject
    >;
    MinterLocked: TypedContractEvent<
      MinterLockedEvent.InputTuple,
      MinterLockedEvent.OutputTuple,
      MinterLockedEvent.OutputObject
    >;

    "MinterUpdated(address)": TypedContractEvent<
      MinterUpdatedEvent.InputTuple,
      MinterUpdatedEvent.OutputTuple,
      MinterUpdatedEvent.OutputObject
    >;
    MinterUpdated: TypedContractEvent<
      MinterUpdatedEvent.InputTuple,
      MinterUpdatedEvent.OutputTuple,
      MinterUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SeederLocked()": TypedContractEvent<
      SeederLockedEvent.InputTuple,
      SeederLockedEvent.OutputTuple,
      SeederLockedEvent.OutputObject
    >;
    SeederLocked: TypedContractEvent<
      SeederLockedEvent.InputTuple,
      SeederLockedEvent.OutputTuple,
      SeederLockedEvent.OutputObject
    >;

    "SeederUpdated(address)": TypedContractEvent<
      SeederUpdatedEvent.InputTuple,
      SeederUpdatedEvent.OutputTuple,
      SeederUpdatedEvent.OutputObject
    >;
    SeederUpdated: TypedContractEvent<
      SeederUpdatedEvent.InputTuple,
      SeederUpdatedEvent.OutputTuple,
      SeederUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
