/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IKoalasSeeder {
  export type SeedStruct = {
    background: BigNumberish;
    fur: BigNumberish;
    face: BigNumberish;
    clothe: BigNumberish;
    eye: BigNumberish;
    mouth: BigNumberish;
    erring: BigNumberish;
    hand: BigNumberish;
    head: BigNumberish;
  };

  export type SeedStructOutput = [
    background: bigint,
    fur: bigint,
    face: bigint,
    clothe: bigint,
    eye: bigint,
    mouth: bigint,
    erring: bigint,
    hand: bigint,
    head: bigint
  ] & {
    background: bigint;
    fur: bigint;
    face: bigint;
    clothe: bigint;
    eye: bigint;
    mouth: bigint;
    erring: bigint;
    hand: bigint;
    head: bigint;
  };
}

export interface IKoalasTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "burn"
      | "dataURI"
      | "getApproved"
      | "isApprovedForAll"
      | "lockDescriptor"
      | "lockMinter"
      | "lockSeeder"
      | "mint"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setDescriptor"
      | "setKoalasDAO"
      | "setMinter"
      | "setSeeder"
      | "supportsInterface"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "DescriptorLocked"
      | "DescriptorUpdated"
      | "KoalasBurned"
      | "KoalasCreated"
      | "KoalasdersDAOUpdated"
      | "MinterLocked"
      | "MinterUpdated"
      | "SeederLocked"
      | "SeederUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockSeeder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDescriptor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKoalasDAO",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeeder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockSeeder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKoalasDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSeeder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DescriptorLockedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DescriptorUpdatedEvent {
  export type InputTuple = [descriptor: AddressLike];
  export type OutputTuple = [descriptor: string];
  export interface OutputObject {
    descriptor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KoalasBurnedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KoalasCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seed: IKoalasSeeder.SeedStruct
  ];
  export type OutputTuple = [
    tokenId: bigint,
    seed: IKoalasSeeder.SeedStructOutput
  ];
  export interface OutputObject {
    tokenId: bigint;
    seed: IKoalasSeeder.SeedStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KoalasdersDAOUpdatedEvent {
  export type InputTuple = [KoalasdersDAO: AddressLike];
  export type OutputTuple = [KoalasdersDAO: string];
  export interface OutputObject {
    KoalasdersDAO: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterLockedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterUpdatedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeederLockedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeederUpdatedEvent {
  export type InputTuple = [seeder: AddressLike];
  export type OutputTuple = [seeder: string];
  export interface OutputObject {
    seeder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IKoalasToken extends BaseContract {
  connect(runner?: ContractRunner | null): IKoalasToken;
  waitForDeployment(): Promise<this>;

  interface: IKoalasTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  dataURI: TypedContractMethod<[tokenId: BigNumberish], [string], "nonpayable">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  lockDescriptor: TypedContractMethod<[], [void], "nonpayable">;

  lockMinter: TypedContractMethod<[], [void], "nonpayable">;

  lockSeeder: TypedContractMethod<[], [void], "nonpayable">;

  mint: TypedContractMethod<[], [bigint], "nonpayable">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  setDescriptor: TypedContractMethod<
    [descriptor: AddressLike],
    [void],
    "nonpayable"
  >;

  setKoalasDAO: TypedContractMethod<
    [KoalasdersDAO: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  setSeeder: TypedContractMethod<[seeder: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dataURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockDescriptor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockMinter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockSeeder"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDescriptor"
  ): TypedContractMethod<[descriptor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKoalasDAO"
  ): TypedContractMethod<[KoalasdersDAO: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSeeder"
  ): TypedContractMethod<[seeder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "DescriptorLocked"
  ): TypedContractEvent<
    DescriptorLockedEvent.InputTuple,
    DescriptorLockedEvent.OutputTuple,
    DescriptorLockedEvent.OutputObject
  >;
  getEvent(
    key: "DescriptorUpdated"
  ): TypedContractEvent<
    DescriptorUpdatedEvent.InputTuple,
    DescriptorUpdatedEvent.OutputTuple,
    DescriptorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KoalasBurned"
  ): TypedContractEvent<
    KoalasBurnedEvent.InputTuple,
    KoalasBurnedEvent.OutputTuple,
    KoalasBurnedEvent.OutputObject
  >;
  getEvent(
    key: "KoalasCreated"
  ): TypedContractEvent<
    KoalasCreatedEvent.InputTuple,
    KoalasCreatedEvent.OutputTuple,
    KoalasCreatedEvent.OutputObject
  >;
  getEvent(
    key: "KoalasdersDAOUpdated"
  ): TypedContractEvent<
    KoalasdersDAOUpdatedEvent.InputTuple,
    KoalasdersDAOUpdatedEvent.OutputTuple,
    KoalasdersDAOUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinterLocked"
  ): TypedContractEvent<
    MinterLockedEvent.InputTuple,
    MinterLockedEvent.OutputTuple,
    MinterLockedEvent.OutputObject
  >;
  getEvent(
    key: "MinterUpdated"
  ): TypedContractEvent<
    MinterUpdatedEvent.InputTuple,
    MinterUpdatedEvent.OutputTuple,
    MinterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SeederLocked"
  ): TypedContractEvent<
    SeederLockedEvent.InputTuple,
    SeederLockedEvent.OutputTuple,
    SeederLockedEvent.OutputObject
  >;
  getEvent(
    key: "SeederUpdated"
  ): TypedContractEvent<
    SeederUpdatedEvent.InputTuple,
    SeederUpdatedEvent.OutputTuple,
    SeederUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "DescriptorLocked()": TypedContractEvent<
      DescriptorLockedEvent.InputTuple,
      DescriptorLockedEvent.OutputTuple,
      DescriptorLockedEvent.OutputObject
    >;
    DescriptorLocked: TypedContractEvent<
      DescriptorLockedEvent.InputTuple,
      DescriptorLockedEvent.OutputTuple,
      DescriptorLockedEvent.OutputObject
    >;

    "DescriptorUpdated(address)": TypedContractEvent<
      DescriptorUpdatedEvent.InputTuple,
      DescriptorUpdatedEvent.OutputTuple,
      DescriptorUpdatedEvent.OutputObject
    >;
    DescriptorUpdated: TypedContractEvent<
      DescriptorUpdatedEvent.InputTuple,
      DescriptorUpdatedEvent.OutputTuple,
      DescriptorUpdatedEvent.OutputObject
    >;

    "KoalasBurned(uint256)": TypedContractEvent<
      KoalasBurnedEvent.InputTuple,
      KoalasBurnedEvent.OutputTuple,
      KoalasBurnedEvent.OutputObject
    >;
    KoalasBurned: TypedContractEvent<
      KoalasBurnedEvent.InputTuple,
      KoalasBurnedEvent.OutputTuple,
      KoalasBurnedEvent.OutputObject
    >;

    "KoalasCreated(uint256,tuple)": TypedContractEvent<
      KoalasCreatedEvent.InputTuple,
      KoalasCreatedEvent.OutputTuple,
      KoalasCreatedEvent.OutputObject
    >;
    KoalasCreated: TypedContractEvent<
      KoalasCreatedEvent.InputTuple,
      KoalasCreatedEvent.OutputTuple,
      KoalasCreatedEvent.OutputObject
    >;

    "KoalasdersDAOUpdated(address)": TypedContractEvent<
      KoalasdersDAOUpdatedEvent.InputTuple,
      KoalasdersDAOUpdatedEvent.OutputTuple,
      KoalasdersDAOUpdatedEvent.OutputObject
    >;
    KoalasdersDAOUpdated: TypedContractEvent<
      KoalasdersDAOUpdatedEvent.InputTuple,
      KoalasdersDAOUpdatedEvent.OutputTuple,
      KoalasdersDAOUpdatedEvent.OutputObject
    >;

    "MinterLocked()": TypedContractEvent<
      MinterLockedEvent.InputTuple,
      MinterLockedEvent.OutputTuple,
      MinterLockedEvent.OutputObject
    >;
    MinterLocked: TypedContractEvent<
      MinterLockedEvent.InputTuple,
      MinterLockedEvent.OutputTuple,
      MinterLockedEvent.OutputObject
    >;

    "MinterUpdated(address)": TypedContractEvent<
      MinterUpdatedEvent.InputTuple,
      MinterUpdatedEvent.OutputTuple,
      MinterUpdatedEvent.OutputObject
    >;
    MinterUpdated: TypedContractEvent<
      MinterUpdatedEvent.InputTuple,
      MinterUpdatedEvent.OutputTuple,
      MinterUpdatedEvent.OutputObject
    >;

    "SeederLocked()": TypedContractEvent<
      SeederLockedEvent.InputTuple,
      SeederLockedEvent.OutputTuple,
      SeederLockedEvent.OutputObject
    >;
    SeederLocked: TypedContractEvent<
      SeederLockedEvent.InputTuple,
      SeederLockedEvent.OutputTuple,
      SeederLockedEvent.OutputObject
    >;

    "SeederUpdated(address)": TypedContractEvent<
      SeederUpdatedEvent.InputTuple,
      SeederUpdatedEvent.OutputTuple,
      SeederUpdatedEvent.OutputObject
    >;
    SeederUpdated: TypedContractEvent<
      SeederUpdatedEvent.InputTuple,
      SeederUpdatedEvent.OutputTuple,
      SeederUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
